
- cache current_student_data.cache_key('v1', current_user.is_staff?, :assignment_weights_key, :assignments_key, :grades_key, :submissions_key) do
  - cache current_student_data.cache_key('v1', current_user.is_staff?, :assignment_weights_key, :assignments_key, :grades_key, :submissions_key) do
    - current_course_data.by_assignment_type.each do |assignment_type, assignments|
      .small-12.columns.panel.radius#syllabus
        - if assignment_type.max_value?
          %h4 #{assignment_type.try(:name)} • #{ points current_student_data.score_for_assignment_type(assignment_type) }/#{points assignment_type.max_value}
        - else
          %h4 #{assignment_type.try(:name)} • #{ points current_student_data.score_for_assignment_type(assignment_type) }/#{points current_student_data.point_total_for_assignment_type(assignment_type)}
        - if assignment_type.student_weightable? && current_course.assignment_weight_open?
          .small-2.right
            - if current_student_data.weighted_assignments?
              .label.round= "#{current_student_data.weight_for_assignment_type(assignment_type)} #{term_for :weights}"
              .label.round= link_to "Change #{term_for :weights}", assignment_type_weights_path(:student_id => current_student.id), assignment_type: assignment_type, user_id: current_student
            - else
              .label.round.success= link_to "Set #{term_for :weights}", assignment_type_weights_path(:student_id => current_student.id), assignment_type: assignment_type
        - elsif assignment_type.student_weightable?
          .label.round= "#{current_student_data.weight_for_assignment_type(assignment_type)} #{term_for :weights}"

        .small-10.assignmentDescription= raw assignment_type.predictor_description if assignment_type.predictor_description?
        %hr

        .small-10.assignmentList
          - assignments.each do |assignment|
            - if assignment.visible? || current_student_data.grade_released_for_assignment?(assignment)
              .small-12.assignmentInfo
                - if assignment.required?
                  %span.label.alert.round.has-tip{:title => "This #{term_for :assignment} is required!", :data => {'tooltip' => true} }
                    %i.fi-star
                %span.assignmentName= link_to assignment.name, assignment_path(assignment, :student_id => current_student)
                - if current_student_data.grade_released_for_assignment?(assignment)
                  %span.points.earned= "#{points current_student_data.score_for_assignment(assignment)}  / "
                %span.points.total #{points current_student_data.point_total_for_assignment(assignment)} points
                - if assignment.assignment_type.student_weightable?
                  = "(Multiplied) "
                  = "–"
                  - if current_student_data.grade_released_for_assignment?(assignment)
                    - grade = current_student_data.grade_for_assignment(assignment)
                    %span.points.earned= points grade.raw_score
                    %span.points= "/"
                  %span.points= points assignment.point_total
                  %span.points points (Raw)
                - if assignment.future?
                  %span.bold= " • Due: #{assignment.due_at.strftime("%A, %B %d, %l:%M%p")}"
                - if assignment.student_logged? && assignment.open? && assignment_type.name == 'Attendance' && current_user.is_student?
                  = simple_form_for current_student_data.grade_for_assignment(assignment), :url => self_log_grades_assignment_path(assignment), :method => :post do |f|
                    - present = current_student_data.present_for_class?(assignment)
                    = hidden_field_tag :present, !present
                    = f.submit (present ? assignment_type.student_logged_revert_button_text : assignment_type.student_logged_button_text), :class => "button #{present ? 'alert' : 'success'} tiny"
                - if assignment.has_groups?
                  - if current_student.group_for_assignment(assignment)
                    = link_to "See Group", group_path(current_student.group_for_assignment(assignment)), :class => "button tiny radius"
                    - if assignment.accepts_submissions?
                      = render "students/group_submissions", assignment: assignment, group: current_student.group_for_assignment(assignment)
                  - else
                    = link_to "Create a Group", new_group_path, :class => "button tiny radius primary"
                - else
                  - if assignment.accepts_submissions?
                    = render "students/submissions", assignment: assignment
                - if current_student_data.grade_released_for_assignment?(assignment) && current_student_data.grade_for_assignment(assignment).feedback?
                  = link_to "See Feedback", assignment_grade_path(assignment, :student_id => current_student), :class => "button tiny radius primary"
                - if assignment.is_individual?
                  - if current_student_data.grade_released_for_assignment?(assignment)
                    - grade = current_student_data.grade_for_assignment(assignment)
                    = link_to "Edit Grade", edit_assignment_grade_path(assignment.id, :student_id => current_student.id), :class => 'button tiny radius'
                  - else
                    = link_to 'Grade', edit_assignment_grade_path("assignment_id"=>assignment.id, :student_id => current_student.id), :class => 'button tiny radius'
                - elsif assignment.has_groups?
                  - if current_student_data.grade_released_for_assignment?(assignment)
                    - grade = current_student_data.grade_for_assignment(assignment)
                    = link_to "Edit Grade", group_grade_assignment_path(assignment, :group_id => current_student.group_for_assignment(assignment)), :class => 'button tiny radius'
                  - else
                    = link_to 'Grade', group_grade_assignment_path("assignment_id"=>assignment.id, :group_id => current_student.group_for_assignment(assignment)), :class => 'button tiny radius'

    - if current_course.team_challenges? && current_course.team_score_average?
      %dd
        %a{ "href" => "#challenges" } #{term_for :challenges} #{ points current_student.team_for_course(current_course).try(:challenge_grade_score) }/#{points current_course_data.point_total_for_challenges}
        .content{:id => "challenges"}
          - current_course_data.challenges.each do |challenge|
            .small-12.columns
              %span= link_to challenge.name, challenge
              - if current_student.team_for_course(current_course)
                - if challenge.challenge_grade_for_team(current_student.team_for_course(current_course)).present?
                  %span.points.earned= points challenge.challenge_grade_for_team(current_student.team_for_course(current_course)).try(:score)
                  %span.points= "/"
              %span.points
                = points challenge.point_total
                = "points"
              - if challenge.future?
                %span.bold= " • Due: #{challenge.due_at.strftime("%A, %B %d, %l:%M%p")}"
  = render 'students/scoreboard'

  .clearfix
