// Display top headers for expandable list of assignments.
- @assignment_types.each do |assignment_type|
  - cache ["v1", assignment_type] do
    .assignment_type{:id => "assignment-type-#{assignment_type.id}" }

      // Display the student's points out of assignment total, if there is an assignment max value. Else
      // display the student's points out of the the current point total for assignment.
      - score_for_assignment_type = assignment_type.visible_score_for_student(current_student)
      - if assignment_type.max_value?
        %h3.collapse
          %a
            %i.fa.fa-angle-double-right.fa-fw
          #{assignment_type.try(:name)} • #{ points score_for_assignment_type }/#{points assignment_type.max_value}
      - else
        %h3.collapse
          %a
            %i.fa.fa-angle-double-right.fa-fw
          #{assignment_type.try(:name)} • #{ points score_for_assignment_type }/#{points score_for_assignment_type }

      .assignment-type-container
        // If the course and particular assignment uses weights, display assignment weighting options
        // with appropriate terminology. If a student has already set a weight, give the option to change
        // weight; else if the student has not yet set a weight, give the option to set weights for the assignment.
        - if assignment_type.student_weightable? && current_course.assignment_weight_open?
          .label.multiplier-setting-open
            - if @student.weighted_assignments?
              = "#{current_student.weight_for_assignment_type(assignment_type)} #{(term_for :weights).titleize} Set"
              = link_to "(Change)", assignment_type_weights_path(:student_id => @student.id), assignment_type: assignment_type
            - else
              = link_to "Set #{(term_for :weights).titleize}", assignment_type_weights_path(:student_id => @student.id), assignment_type: assignment_type
        - elsif assignment_type.student_weightable?
          .label.multiplier-setting-closed= "#{current_student.weight_for_assignment_type(assignment_type)} #{(term_for :weights).titleize}"
          // Display the description for the assignment type if it exists.
        - if assignment_type.predictor_description?
          %p.predictor-description= raw assignment_type.predictor_description

        // Display the assignments for each assignment type in a responsive table, below header.
        %table
          %thead
            %tr
              %th
              %th{:style => "width: 150px"}= "#{term_for :assignment}"
              %th Points
              %th Due
              %th
              %th{:style => "width: 300px"}
          %tbody
            - assignments = assignment_type.assignments.includes(:assignment_type)
            - assignments.each do |assignment|
              - cache ["v1", assignment] do
                - grade_released_for_assignment = current_student.grade_released_for_assignment?(assignment)
                - grade_for_assignment = current_student.grade_for_assignment(assignment)
                - group_for_assignment = @student.group_for_assignment(assignment)
                - student_submission = @student.submission_for_assignment(assignment)
                - if assignment.visible_for_student?(current_student) || grade_released_for_assignment
                  %tr
                    %td= render "students/syllabus/assignment_icons", :assignment => assignment
                    %td= link_to assignment.name, assignment_path(assignment)
                    %td
                      - if assignment.pass_fail?
                        - if current_student.grade_released_for_assignment?(assignment)
                          .bold
                            = "#{term_for grade_for_assignment.pass_fail_status}"
                        - else
                          = "#{term_for :pass}/#{term_for :fail}"
                      - else
                        - if assignment.assignment_type.student_weightable?
                          - grade = grade_for_assignment
                          .icon
                            .icon-tooltip
                              = "#{ points grade.score } / #{points grade.point_total} points (Multiplied), #{points grade.raw_score} / #{ points assignment.point_total } points (Raw)"
                            - if grade_released_for_assignment
                              .bold= "#{ points grade.score } / #{points grade.point_total} points earned"
                              .italic= "Your Goal: #{points grade.predicted_score}" if grade && grade.predicted_score > 0 && current_user_is_student?
                            - else
                              .italic.not_bold= "#{points grade.point_total} points possible"
                              .italic.bold= "Your Goal: #{points grade.predicted_score}" if grade && grade.predicted_score > 0 && current_user_is_student?
                        - else
                          - grade = grade_for_assignment
                          - if grade_released_for_assignment
                            .bold
                              = "#{points current_student.score_for_assignment(assignment)} / #{points assignment.point_total} points earned"
                            .italic= "Your Goal: #{points grade.predicted_score}" if grade && grade.predicted_score > 0 && current_user_is_student?
                          - else
                            .italic.not_bold= "#{points grade.point_total} points possible"
                            .italic.bold= "Your Goal: #{points grade.predicted_score}" if grade && grade.predicted_score > 0 && current_user_is_student?
                    %td
                      - if assignment.future?
                        %span= "#{assignment.due_at.strftime("%A, %b %d, %l:%M%p")}"
                      - else
                        %span
                    %td
                      - if assignment.student_logged? && assignment.open? && current_user_is_student?
                        = render partial: "assignments/self_log_form", locals: { student: @student, assignment: assignment }
                      - else
                        %span
                    %td
                      .right
                        %ul
                          - if grade_released_for_assignment
                            %li= link_to raw("<i class='fa fa-eye fa-fw'></i> See Results"), assignment_path(assignment, :anchor => "fndtn-tabt4"), :class => "button"
                          - if assignment.has_groups?
                            - if group_for_assignment.present?
                              %li= link_to "See Group", group_path(group_for_assignment), :class => "button"
                              - if assignment.accepts_submissions? && assignment.is_unlocked_for_student?(current_student)
                                - if group_for_assignment && group_for_assignment.submission_for_assignment(assignment)
                                  %li= link_to "See Submission", assignment_path(assignment, :anchor => "fndtn-tabt3"), :class => 'button'
                                - else
                                  - if group_for_assignment && group_for_assignment.approved?
                                    %li= link_to "Submit", new_assignment_submission_path(assignment, :group_id => group_for_assignment), :class => 'button'
                            - else
                              %li= link_to "Create a Group", new_group_path, :class => "button"
                          - else
                            - if assignment.accepts_submissions? && assignment.is_unlocked_for_student?(current_student)
                              - if student_submission.present?
                                %li= link_to "See Submission", assignment_path(assignment, :anchor => "fndtn-tabt3"), :class => 'button'
                              - elsif assignment.open?
                                %li= link_to "Submit", new_assignment_submission_path(assignment, :student_id => @student), :class => 'button'
                          - if current_user_is_staff?
                            - grade = grade_for_assignment
                            - if assignment.is_unlockable? && ! assignment.is_unlocked_for_student?(current_student)
                              %li= link_to raw("<i class='fa fa-lock fa-fw'></i> Unlock"), manually_unlock_unlock_state_path(:student_id => current_student.id, :assignment_id => assignment.id), :method => :post, :class => "button"
                            - if assignment.is_individual?
                              - if grade_released_for_assignment
                                %li= link_to raw("<i class='fa fa-edit fa-fw'></i> Edit Grade"), edit_assignment_grade_path(assignment.id, :student_id => @student.id), :class => 'button'
                              - else
                                %li= link_to raw("<i class='fa fa-check fa-fw'></i> Grade"), edit_assignment_grade_path(:assignment_id =>assignment.id, :student_id => @student.id), :class => 'button'
                            - elsif assignment.has_groups?
                              - if grade_released_for_assignment
                                %li= link_to raw("<i class='fa fa-edit fa-fw'></i> Edit Grade"), group_grade_assignment_path(assignment, :group_id => group_for_assignment), :class => 'button'
                              - else
                                %li= link_to raw("<i class='fa fa-check fa-fw'></i> Grade"), group_grade_assignment_path(assignment, :group_id => group_for_assignment), :class => 'button'
