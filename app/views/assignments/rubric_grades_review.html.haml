= content_nav_for @assignment, "Review Rubric Grades"

%h3.pagetitle= "#{@title} Review Rubric Grades (#{ points @assignment.point_total } points)"

= render "buttons"

.pageContent
  - if @assignment.open_at?
    .small-12.large-4.columns.panel
      .bold Open date:
      = @assignment.open_at

  - if @assignment.due_at?
    .small-12.large-4.columns.panel
      .bold Due date:
      = @assignment.due_at

  - if @assignment.accepts_submissions_until?
    .small-12.large-4.columns.panel
      .bold Accept submissions until:
      = @assignment.accepts_submissions_until

  - if @assignment.description?
    %p= raw @assignment.description

  - assignment_files = @assignment.assignment_files
  - if assignment_files.present?
    %p
      %b Attachments:
      %ul
        - assignment_files.each do |assignment_file|
          %li
            = link_to assignment_file.filename, assignment_file.url
            = link_to " (Remove)", remove_uploads_path({ :model => "AssignmentFile", :upload_id => assignment_file.id, :redirect => { :controller => "assignments", :id => @assignment.id} } )

  - if current_course.has_teams? && @assignment.is_individual?
    .team-filter
      = form_tag rubric_grades_review_assignment_path(@assignment), :name => "see_team", :onchange => ("javascript: document.see_team.submit();"), :method => :get do
        %label.sr-only{:for => "team_id"}
          Select #{term_for :team}
        = select_tag :team_id, options_for_select(@teams.map { |t| [t.name, t.id] }, @team.try(:id)), :prompt => "– Select #{(term_for :team).titleize} –"

  -rubric = @assignment.rubric
  - if rubric and rubric.designed?
    - @students.each do |student|
      .small-12.columns
        - grade_for_assignment = student.grade_for_assignment(@assignment)
        - if grade_for_assignment.present? && grade_for_assignment.instructor_modified?
          %h4.uppercase= student.name
          .left
            %h5.bold= "#{grade_for_assignment.score} / #{@assignment.point_total} points "
          .right= link_to "Edit Grade", edit_assignment_grade_path(@assignment, :student_id => student.id), :class => 'tiny radius button'
          %br
          %br
          %table#grade-rubric-table.small-12
            %thead
              %tr
                %td
                  %strong Criterion
                  .not_bold.italic Max points
                %td(colspan="#{@assignment.rubric.try(:max_tier_count)}")
                  .larger
                    %strong Level
                    .not_bold.italic Point value
                %td{:width => "25%"}
                  %strong
                    Comments
            %tbody
              - @metrics.each do |metric|
                %tr
                  %td.metric(style="font-size: 12px !important; width: 10%")
                    .metric-heading
                      .metric-name.bold= metric.wrapped_name(28).html_safe
                      .metric-points.italic= "#{points metric.max_points} Points"
                      .clear
                    .metric-description= metric.wrapped_description(40).html_safe

                  - metric.tiers.each do |tier|
                    %td.tier
                      .tier-heading
                        .tier-name.uppercase= tier.wrapped_name(25).html_safe
                        .clear
                        .tier-points.italic= "#{points tier.points} Points"
                      .clear
                      .tier-description= tier.description

                      .row.badge-row
                        %br
                        - tier.tier_badges.each_with_index do |badge, index|
                          - if index < 2
                            %span.tier-badge-image
                              %img{:src => badge.badge.icon, width: "30px", height: "30px" }
                        %br
                        %br
                        - @viewable_rubric_grades.where(student_id: student.id, tier_id: tier.id).each do |rg|
                          .italic{style: "color: #00BD39; font-size: 110%"} #{student.first_name} earned this level
                  - if metric.tiers.size < @rubric.max_tier_count
                    %td.filler(colspan="#{@rubric.max_tier_count - metric.tiers.size}")
                  %td.comments.italic{style: "font-size: 100%"}
                    - @viewable_rubric_grades.where(student_id: student.id, metric_id: metric.id).each do |rg|
                      = rg.comments