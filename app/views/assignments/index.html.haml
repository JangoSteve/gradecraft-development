= content_nav_for Assignment

%h3.pagetitle= @title

.context_menu
  %ul
    %li
      %a{:href => new_assignment_path }
        %i.fa.fa-plus.fa-fw
        New #{(term_for :assignment).titleize}
    %li
      %a{:href => settings_assignments_path }
        %i.fa.fa-dashboard.fa-fw
        Review #{(term_for :assignment).titleize} Settings

.pageContent
  .assignments
    - @assignment_types.each do |assignment_type|
      - cache ["v1", assignment_type] do
        .assignment_type{:id => "assignment-type-#{assignment_type.id}" }
          %h3.collapse
            %a
              %i.fa.fa-angle-double-right.fa-fw
            .assignment-name #{assignment_type.name} â€“ #{points assignment_type.max_value} points
          .collapse-hidden
            %table.responsive{"aria-describedby" => "assignment-type-#{assignment_type.id}"}
              %thead
                %tr
                  %th
                  %th
                  %th{:scope => "col", :width => "20%"} Name
                  %th Due
                  %th{:style => "display: none"} Due Date
                  %th{:scope => "col", :width => "10%"}  Max Value
                  %th Rubric?
                  %th{ :style => "min-width: 200px" }
              %tbody.sort-assignments
                - assignments = assignment_type.assignments.includes(:rubric, :assignment_type).sorted
                - assignments.each do |assignment|
                  - cache ["v1", assignment] do
                    %tr{:id => "assignment-#{assignment.id}"}
                      %td
                        %i.fa.fa-arrows-v
                      %td
                        - if assignment.is_unlockable?
                          %a
                            %i.fa.fa-lock
                          .display_on_hover.unlock_keys
                            %h3 Unlock Requirements
                            %ul
                              - assignment.unlock_conditions.each do |condition|
                                %li= "#{condition.name} must be #{condition.condition_state}"
                        - if assignment.is_a_condition?
                          %a
                            %i.fa.fa-key
                          .display_on_hover.unlock_keys
                            %h3 Unlock Key
                            %ul
                              - assignment.unlock_keys.each do |key|
                                %li= "#{key.unlockable.name} is unlocked by #{key.condition_state} #{key.condition.name}"
                      %td
                        = link_to assignment.name, assignment
                      %td= assignment.try(:due_at) || "Ongoing"
                      %td{:style => "display: none"}
                        - if assignment.due_at.present?
                          = assignment.try(:due_at).to_formatted_s(:db)
                      - if assignment.pass_fail?
                        %td.foobers= "#{term_for :pass}/#{term_for :fail}"
                      - else
                        %td.doobers= assignment.point_total
                      %td= "Yes" if assignment.rubric and assignment.rubric.designed?
                      %td
                        .right
                          %ul
                            - if ! ( assignment.rubric and assignment.rubric.designed? and assignment.use_rubric? )
                              %li= link_to raw('<i class="fa fa-check fa-fw"> </i> Quick Grade'), mass_grade_assignment_path(assignment), :class => "button"
                            %li= link_to raw('<i class="fa fa-edit fa-fw"> </i> Edit'), edit_assignment_path(assignment), :class => 'button'
                            %li= link_to raw('<i class="fa fa-copy fa-fw"> </i> Copy'), copy_assignments_path(:id => assignment), :class => 'button', :method => :copy
                            %li= link_to raw('<i class="fa fa-trash fa-fw"> </i> Delete'), assignment_path(assignment), :data => { confirm: 'Are you sure?', method: :delete }, :class => "button"