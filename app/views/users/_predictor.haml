#predictorWrapper
  #userID{ 'data-user-id' => student.id }
    #predictionWrapper
      #projectedPoints
        %h3#pointTally
          - if current_user.is_student?
            = "Your projected points:"
          - elsif current_user.is_staff?
            = "#{student.name}'s projected points:"
          %span#predictor-score-display= number_with_delimiter(student.earned_grades(current_course), :delimiter => ',') if student.respond_to?(:earned_grades)
          = "/"
          %span#predictor-course-total-display= number_with_delimiter(student.point_total_for_course(current_course), :delimiter => ',')
          %p
            = "Predicted Final Grade:"
            %span#predictedCourseGrade= student.grade_level_for_course(current_course)
        %span#expectedPointsValue
        #prediction

#predictorPage{ 'data-student-name' => student.name, 'data-course-total' => student.point_total_for_course(current_course) }
  .flexslider.col.col-lg-12
    %ul.slides.col.col-lg-10
      - @assignments.group_by(&:assignment_type).each do |assignment_type, assignments|
        %li{:id => "slide-#{assignment_type.id}", :data => { :'assignment-type-id' => assignment_type.id, :'assignment-type-name' => assignment_type.name } }
          .slide-panel.col.col-lg-12
            .assignmentType
              %span.assignmentTypeTitle= assignment_type.name
              .pull-right
                %span.badge.badge-warning
                  = "#{student.score_for_assignment_type(assignment_type)} / "
                  = "#{assignment_type.assignments.point_total_for_student(student)} possible points"
                - if true # TODO: fix! assignment_type.weight_for_student?(student)
                  %span.badge.badge-important
                    = "#{student.weight_for_assignment_type(assignment_type)} #{current_course.multiplier_term} "
                    - if assignment_type.student_weightable? && assignment_type.multiplier_open?
                      - assignment_type.weight_for_assignment_type(student).tap do |weight|
                        - if weight
                          = link_to "(Change)", edit_user_assignment_type_weight_path(student, weight, :assignment_type_id => assignment_type.id)
                - else
                  - if assignment_type.student_weightable? && assignment_type.multiplier_open?
                    %span.badge.badge-important= link_to "Set #{current_course.multiplier_term}", new_user_user_assignment_type_weight_path(student, :assignment_type_id => assignment_type.id)
            %p.lead= raw assignment_type.predictor_description
            - assignments.each do |assignment|
              .assignment
                %span.assignmentTitle= assignment.try(:name)
                - if assignment.is_required?
                  %span.assignmentRequired.label.label-important Required!
                .assignmentScore
                - if assignment.is_individual?
                  - assignment.assignment_grades.where(:student_id => student).first.tap do |grade|
                    - if grade
                      - if assignment.release_necessary? && grade.is_released?
                        = "You earned #{ grade.score(student) } out of #{assignment.point_total_for_student(student)} points"
                        = hidden_field_tag assignment.name, grade.score(student), :'data-assignment-type-id' => assignment.assignment_type_id
                      - elsif assignment.release_necessary?
                        = "#{assignment.point_total_for_student(student)} points possible"
                      - else
                        = "You earned #{ grade.score(student)} out of #{assignment.point_total_for_student(student)} points"
                        = hidden_field_tag assignment.name, grade.score(student), :'data-assignment-type-id' => assignment.assignment_type_id
                    - else
                      - if assignment_type.fixed?
                        = "#{assignment.point_total_for_student(student)} possible points"
                        %input{:type => "checkbox", :name => assignment.name, :value => (assignment.point_total_for_student(student)), :class => "class-checkbox", :'data-assignment-type-id' => assignment.assignment_type_id }
                      - elsif assignment_type.slider?
                        %span.pScore= "0 "
                        = "/ #{assignment.point_total_for_student(student)} multiplied possible points"
                        .slider{:id => "slider-"+assignment.id.to_s(), :max => (assignment.point_total_for_student(student)) , :value => 0 }

                        //- if assignment_type.has_levels?
                        //%select{:name => "#{assignment.name}", :id => "#{assignment.id}"}
                        //- assignment.score_levels.each do |sl|
                        //%option{:value => "sl.value"}= sl.name
                        //- else

                      - elsif assignment_type.select?
                        = "#{assignment.point_total_for_student(student)} possible points"
                        = select_tag assignment.name, options_from_collection_for_select(assignment_type.score_levels,'value','name'), :class => 'point-value', :id => "total-#{assignment.id}", :include_blank => true
                - elsif assignment.has_teams?
                  - assignment.assignment_grades.where(:team_id => student.teams.first).first.tap do |grade|
                    - if grade
                      - if assignment.release_necessary? && grade.is_released?
                        = "Your team earned #{ grade.score(student) } out of #{grade.point_total(student)} points"
                        = hidden_field_tag assignment.name, grade.score(student), :'data-assignment-type-id' => assignment.assignment_type_id
                      - elsif assignment.release_necessary?
                        = "#{assignment.point_total_for_student(student)} points possible"
                      - else
                        = "Your team earned #{ grade.score(student)} out of #{assignment.point_total_for_student(student)} points"
                        = hidden_field_tag assignment.name, grade.score(student), :'data-assignment-type-id' => assignment.assignment_type_id
                    - else
                      - if assignment_type.fixed?
                        = "#{assignment.point_total_for_student(student)} possible points"
                        %input{:type => "checkbox", :name => assignment.name, :value => (assignment.point_total_for_student(student)), :class => "class-checkbox", :'data-assignment-type-id' => assignment.assignment_type_id }

                      - elsif assignment_type.slider?
                        %span.pScore= "0 "
                        = "/ #{assignment.point_total_for_student(student)} multiplied possible points"
                        .slider{:id => "slider-"+assignment.id.to_s(), :max => (assignment.point_total_for_student(student)) , :value => 0 }

                        //- if assignment_type.has_levels?
                        //%select{:name => "#{assignment.name}", :id => "#{assignment.id}"}
                        //- assignment.score_levels.each do |sl|
                        //%option{:value => "sl.value"}= sl.name
                        //- else

                      - elsif assignment_type.select?
                        = "#{assignment.point_total_for_student(student)} possible points"
                        = select_tag assignment.name, options_from_collection_for_select(assignment_type.score_levels,'value','name'), :class => 'point-value', :id => "total-#{assignment.id}", :include_blank => true

                - elsif assignment.has_groups?
                  - if student.group_for_assignment(assignment)
                    - assignment.assignment_grades.where(:group_id => student.group_for_assignment(assignment)).first.tap do |grade|
                      - if grade
                        - if assignment.release_necessary? && grade.is_released?
                          = "Your group earned #{ grade.score(student) } out of #{assignment.point_total_for_student(student)} points"
                          = hidden_field_tag assignment.name, grade.score(student), :'data-assignment-type-id' => assignment.assignment_type_id
                        - elsif assignment.release_necessary?
                          = "#{grade.point_total(student)} points possible"
                        - else
                          = "Your group earned #{ grade.score(student)} out of #{assignment.point_total_for_student(student)} points"
                          = hidden_field_tag assignment.name, grade.score(student), :'data-assignment-type-id' => assignment.assignment_type_id
                  - else
                    - if assignment_type.fixed?
                      = "#{assignment.point_total_for_student(student)} possible points"
                      %input{:type => "checkbox", :name => assignment.name, :value => (assignment.point_total_for_student(student)), :class => "class-checkbox", :'data-assignment-type-id' => assignment.assignment_type_id }

                    - elsif assignment_type.slider?
                      %span.pScore= "0 "
                      = "/ #{assignment.point_total_for_student(student)} multiplied possible points"
                      .slider{:id => "slider-"+assignment.id.to_s(), :max => (assignment.point_total_for_student(student)) , :value => 0 }

                      //- if assignment_type.has_levels?
                      //%select{:name => "#{assignment.name}", :id => "#{assignment.id}"}
                      //- assignment.score_levels.each do |sl|
                      //%option{:value => "sl.value"}= sl.name
                      //- else

                    - elsif assignment_type.select?
                      = "#{assignment.point_total_for_student(student)} possible points"
                      = select_tag assignment.name, options_from_collection_for_select(assignment_type.score_levels,'value','name'), :class => 'point-value', :id => "total-#{assignment.id}", :include_blank => true

      - if current_course.valuable_badges?
        %li#slide-badges{ :data => { 'assignment-type-id' => 'badges', 'assignment-type-name' => 'Badges' } }
          .slide-panel.col.col-lg-12
            .assignmentType
              %span.assignmentTypeTitle Badges
              %span.badge.badge-warning.pull-right= "#{student.earned_badges_value(current_course)} points"
            %p.lead
            %div
              - current_course.badges.each do |badge|
                - badge.badges_earned.where(:earnable_id => student.id).first.tap do |eb|
                  - if eb
                    .earnedBadgeField
                      %img{:src => badge.try(:icon), :alt => badge.try(:name), :width => "50"}
                      .clearfix= badge.name
                      .clearfix
                        %b= "#{badge.point_value} points"
                      = hidden_field_tag badge.name, badge.point_value
                  - else
                    .badgeField
                      %img{:src => badge.try(:icon), :alt => badge.try(:name), :width => "50"}
                      .clearfix= badge.name
                      .clearfix
                        %b= "#{badge.point_value} points"
                      .clearfix= check_box_tag badge.name, badge.point_value, student.badges.include?(badge), :class => 'class-checkbox', :'data-assignment-type-id' => 'grades'
  - if current_user.is_student?
    = link_to "Back to the Dashboard", user_path(student), :class => 'btn btn-primary'
  - elsif current_user.is_staff?
    = link_to "Back to #{student.first_name}'s Dashboard", user_path(student), :class => 'btn btn-primary'

