- if @challenge.errors.any?
  .alert-box.alert.radius
    .italic= "#{pluralize(@challenge.errors.count, "error")} prohibited this #{term_for :challenge} from being saved:"
    %ul
      - @challenge.errors.full_messages.each do |msg|
        %li= msg

= simple_form_for(@challenge) do |f|
  %section
    %h4 Basic Info

    .form-item
      = f.label :name
      = f.text_field :name

    .form-item
      = f.label :point_total
      = f.text_field :point_total, data: {autonumeric: true, "m-dec" => "0"}

    .form-item
      = f.input :open_at, as: :string, :input_html => { :class => 'datetimepicker', :value => @challenge.try(:open_at) }

    .form-item
      = f.input :due_at, as: :string, :include_blank => true, :input_html => { :class => 'datetimepicker', :value => @challenge.try(:due_at) }

  %section
    %h4 Description

    .textarea
      .form_label What do the #{term_for :teams} need to do to succeed?
      = f.text_area :description, :class => "froala"

  %section
    %h4 GradeCraft Settings
    .form-item
      = f.label :visible, "Visible to students?"
      = f.check_box :visible

    .form-item
      = f.label :check_box, "Will the #{term_for :team} submit materials?"
      = f.check_box :accepts_submissions
      .form_label All #{term_for :team} members will be able to submit work for their #{term_for :team} as a whole, and see their resulting grades.

    .form-item
      = f.label :release_necessary, "Release necessary?"
      = f.check_box :release_necessary
      .form_label Do you want to release all grades at once? This is particularly useful for situations where extensive feedback is important.


  %section
    %h4 Grade Levels
    .challenge-score-levels
      %p.hint Example: You could create three levels to produce a quick grading scheme for just this #{term_for :challenge} - Complete (5000 points), Finalist (7000 points), and Winner (10,000 points). These levels will then show in the quick grade, and when students are setting goals in the grade predictor.
      %script(id="challenge-score-level-template" type="text/x-template")
        %fieldset.challenge-score-level
          = f.simple_fields_for :challenge_score_levels, ChallengeScoreLevel.new, class: 'form-inline', child_index: 'child_index' do |slf|
            = render 'challenge_score_level_fields', f: slf
      - @challenge.challenge_score_levels.each do |challenge_score_level|
        %fieldset.challenge-score-level
          = f.simple_fields_for :challenge_score_levels, challenge_score_level, class: 'form-inline' do |slf|
            = render 'challenge_score_level_fields', f: slf
    = link_to 'Add a Level', '#', class: 'add-challenge-score-level button radius'

  %section
    %h4 Timeline

    .form-item
      = f.label :thumbnail
      = f.file_field :thumbnail
      - if @challenge.thumbnail.present? && @challenge.errors[:thumbnail].empty?
        %img{src: @challenge.thumbnail, alt: "Thumbnail Image", style: "height: 25px; width: 25px;" }
        = f.check_box :remove_thumbnail
        Remove Thumbnail

    .form-item
      = f.label :media, "Media Image"
      = f.file_field :media
      - if @challenge.media.present? && @challenge.errors[:media].empty?
        %img{src: @challenge.media, width: 40, alt: "Media Image" }
        = f.check_box :remove_media
        Remove Image

    .form-item
      = f.label :media_credit, "Credit"
      = f.text_field :media_credit

    .form-item
      = f.label :media_caption, "Caption"
      = f.text_field :media_caption

  %section
    %h4 Attachments
    = f.simple_fields_for :challenge_files, @challenge.challenge_files.new do |cf|
      = cf.file_field :file, :multiple => true
    - if @challenge.challenge_files.exists?
      %h5.bold Uploaded files
      %ul.uploaded-files
        - @challenge.challenge_files.each do |cf|
          - next if cf.new_record?
          %li
            - if cf.file_processing
              = "#{cf.filename}"
              %a
                %i.fa.fa-spinner.fa-fw= "(upload in progress)"
              .display-on-hover.hover-style
                Refresh page to confirm upload has completed
            - else
              = link_to cf.filename, cf.url, :target => "_blank"
              = link_to "(Remove)", remove_uploads_path({ :model => "ChallengeFile", :challenge_id => @challenge.id, :upload_id => cf.id } )

  .submit-buttons
    %ul
      %li= f.button :submit, "#{@challenge.persisted? ? 'Update' : 'Create'} #{term_for :challenge }"
      %li= link_to 'Cancel', challenges_path, :class => 'button'
